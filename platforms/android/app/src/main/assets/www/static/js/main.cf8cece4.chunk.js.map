{"version":3,"sources":["config.js","assets/img/something-went-wrong.gif","store/actions/actionTypes.js","serviceWorker.js","components/PageSpinner/PageSpinner.js","components/Header/Header.js","components/Snackbar/Snackbar.js","components/MainLayout/MainLayout.js","ErrorBoundary/ErrorBoundary.js","Routes.js","App.js","store/utility.js","store/reducers/Auth.js","store/reducers/Home.js","store/reducers/MyCards.js","store/reducers/MainLayout.js","store/reducers/Contests.js","store/reducers/Leaders.js","helpers/array.js","store/reducers/Wallet.js","store/reducers/Account.js","index.js","httpInstance/axios.js","store/actions/Auth.js","url/Auth.js","store/actions/Leaders.js","store/actions/MainLayout.js","url/MainLayout.js","url/MyCards.js","store/actions/MyCards.js","url/Home.js","store/actions/Home.js","helpers/miscellaneous.js","helpers/cookie.js","components/Snackbar/Snackbar.module.css","ErrorBoundary/ErrorBoundary.module.css"],"names":["axiosBaseUrl","googleClientId","encodeURIComponent","facebookAppId","module","exports","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT","SET_REDIRECT_PATH","SET_OTP","EMPTY_TOKEN","UPDATE_SET_PASSWORD_STATUS","SET_REQUEST_TO_SET_PASSWORD_ID","UPDATE_LOADING_STATUS","SET_USER_DETAILS","SET_USER_SOCIAL_URL","EMPTY_USER_PROFILE","SET_CARDS","EMPTY_CARDS","SET_SOCIAL_URL","UPDATE_CARDS","SET_QUESTIONS","SET_LEADERS","SET_WALLET_DETAILS","SET_TRANSACTIONS","SET_UNSETTLED_CONTESTS","SET_SETTLED_CONTESTS","SET_SNACKBAR_MESSAGE","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","PageSpinner","color","Row","style","height","justifyContent","alignItems","maxWidth","Dimmer","active","inverted","content","Header","props","className","background","id","flexDirection","flexWrap","to","connect","dispatch","onSetSnackbarMessage","message","actionCreaters","useEffect","setTimeout","checkInternet","emptySnackbar","Styles","snackbar","show","join","Button","close","marginLeft","onClick","mainLayout","userDetails","home","onUpdateUserLocation","useState","isOnline","setOnlineStatus","getMyLocation","updateOnlineStatus","onLine","geolocation","getCurrentPosition","position","latitude","coords","longitude","Col","xs","lg","md","paddingLeft","paddingRight","isMobileView","children","addEventListener","ErrorBoundary","hasError","info","this","classes","src","errorImage","alt","Component","Login","React","lazy","Signup","Engage","MyCards","ReceivedCards","Home","unauthenticated_routes","path","component","authenticated_routes","App","routes","getRedirectPath","routeExist","i","length","pathname","redirectDefaultRoute","getItem","Suspense","fallback","map","key","exact","breakpoint","withRouter","auth","isAuthenticated","token","authRedirectPath","superAdminDetails","onSetRedirectPath","updateObject","oldObject","updatedProperties","initialState","userId","adminDetails","otp","requestToSetPassword","isPasswordSetSuccessfully","isLoading","authSuccess","action","authFail","authLogout","updateLoadingStatus","status","setRedirectPath","setOtp","emptyToken","setRequestToSetPasswordId","updateSetPasswordStatus","Auth","type","actionTypes","userSocialUrl","setUserDetails","setUserSocialUrl","emptyUserProfile","cards","socialUrl","setCards","updateCards","updateCardsData","concat","cardDetails","setSocialUrl","emptyCards","setSnackbarMessage","MainLayout","questions","questionText","entryFee","contestId","options","optionText","betCountOnOption","setQuestions","Contests","leaders","isLeadersEmpty","setLeaders","arr","Leaders","walletDetails","transactions","setWalletDetails","details","wallet","setTransactions","Wallet","unsettledContests","settledContests","setUnsettledContests","setSettledContests","Account","rootReducer","combineReducers","myCards","contests","account","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","basename","process","split","pop","ReactDOM","render","document","getElementById","URL","href","origin","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","instance","axios","create","baseURL","interceptors","request","use","login","loginDetails","post","data","entity","role","roles","setItem","signup","signupDetails","socialLogin","authDetails","getLeaders","updateUserLocation","put","cardsUrl","getCards","user","getSocialUrl","addCard","updateCardDetails","cardId","cardDetailsUrl","userProfileUrl","getUserProfile","social","updateUserProfile","profileDetails","updateSocialUrl","socialPlatform","test","userAgent","parseData","JSON","parse","stringify","getCapitalizeText","text","replace","l","toUpperCase","isEmpty","item","trim","isEqual","item1","item2","toLowerCase","convertDateFormat","date","customDateFormat","month","Date","getMonth","day","getDate","getFullYear","convertToTimestamp","getTime","isAndroid","cookies","Cookies","meta","localStorage","hasOwnProperty","value","set","clearItems","clear","allCookies","getAll","remove"],"mappings":"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","file":"static/js/main.cf8cece4.chunk.js","sourcesContent":["// export const axiosBaseUrl = 'http://13.126.172.69:3000';\nexport const axiosBaseUrl = process.env.NODE_ENV !== 'production' ? 'http://fc7be3c3.ngrok.io/' : 'http://fc7be3c3.ngrok.io/';\n\nconst appUrl = encodeURIComponent(process.env.NODE_ENV !== 'production' ? 'http://13.235.50.69:3000/' : 'http://api.league-app.com/');\n\nexport const facebookUrl = 'https://www.facebook.com/dialog/share?app_id=162911467985829&display=popup&u=' + appUrl;\nexport const LinkedInUrl = '?mini=true&source=' + appUrl;\n\nexport const googleClientId = process.env.NODE_ENV !== 'production' ?\n    '366862635690-ecl51tttjto9kdjgnt1te6hkl5aol9id.apps.googleusercontent.com'\n    :\n    '923778317040-l3qdops5rimpbmg5fclhlk8kk0g6i6p0.apps.googleusercontent.com';\n\nexport const facebookAppId = process.env.NODE_ENV !== 'production' ? '880883362326999' : '508741089833759';","module.exports = __webpack_public_path__ + \"static/media/something-went-wrong.cca82265.gif\";","/*\n * Define which type of action to be dispatched to reducer\n */\n\n\n// AUTH\nexport const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\nexport const SET_REDIRECT_PATH = 'SET_REDIRECT_PATH';\nexport const SET_USER_PROFILE_DETAILS = 'SET_USER_PROFILE_DETAILS';\nexport const SET_OTP = 'SET_OTP';\nexport const EMPTY_TOKEN = 'EMPTY_TOKEN';\nexport const UPDATE_SET_PASSWORD_STATUS = 'UPDATE_SET_PASSWORD_STATUS';\n\nexport const SET_REQUEST_TO_SET_PASSWORD_ID = 'SET_REQUEST_TO_SET_PASSWORD_ID';\n\nexport const UPDATE_LOADING_STATUS = 'UPDATE_LOADING_STATUS';\n\n// For Home\nexport const SET_USER_DETAILS = 'SET_USER_DETAILS';\nexport const SET_USER_SOCIAL_URL = 'SET_USER_SOCIAL_URL';\nexport const EMPTY_USER_PROFILE = 'EMPTY_USER_PROFILE';\n\n// For My Cards\nexport const SET_CARDS = 'SET_CARDS';\nexport const EMPTY_CARDS = 'EMPTY_CARDS';\nexport const SET_SOCIAL_URL = 'SET_SOCIAL_URL';\nexport const UPDATE_CARDS = 'UPDATE_CARDS';\n\n// For Contests\n\nexport const SET_QUESTIONS = 'SET_QUESTIONS';\n\n// For Leaders\nexport const SET_LEADERS = 'SET_LEADERS'\n\n// For Wallet\nexport const SET_WALLET_DETAILS = 'SET_WALLET_DETAILS';\nexport const SET_TRANSACTIONS = 'SET_TRANSACTIONS';\n\n// For Account\nexport const SET_UNSETTLED_CONTESTS = 'SET_UNSETTLED_CONTESTS';\nexport const SET_SETTLED_CONTESTS = 'SET_SETTLED_CONTESTS';\n\n// Snackbar Message\nexport const SET_SNACKBAR_MESSAGE = 'SET_SNACKBAR_MESSAGE';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Row } from 'reactstrap';\nimport { Dimmer, Loader as Loading } from 'semantic-ui-react';\n\nconst PageSpinner = ({ color = 'primary' }) => {\n    return (\n        <Row\n            style={{\n                height: '100vh',\n                justifyContent: 'center',\n                alignItems: 'center',\n                maxWidth: '100%'\n            }}>\n            <Dimmer active inverted>\n                <Loading inverted content='Loading' />\n            </Dimmer>\n        </Row>\n    );\n};\n\nPageSpinner.propTypes = {\n    color: PropTypes.oneOf([\n        'primary',\n        'secondary',\n        'success',\n        'danger',\n        'warning',\n        'info',\n        'light',\n        'dark',\n    ]),\n};\n\nexport default PageSpinner;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Header.css';\n\nconst Header = (props) => {\n    return (\n        <nav\n            className={`navbar navbar-expand-md navbar-dark fixed-bottom`}\n            style={{ background: '#313648' }}>\n            <div className=\"w-100\" id=\"navbarCollapse\">\n                <div className=\"navbar-nav pt-2 pb-2\" style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' }}>\n                    <NavLink to=\"/\" className=\"nav-item nav-link p-2\">\n                        {/* <img src={Img} style={{ width: '30px', height: '30px' }} alt=\"img removed\" /><br /> */}\n                        Home\n                    </NavLink>\n                    <NavLink to=\"/engage\" className=\"nav-item nav-link p-2\">\n                        {/* <img src={Img} style={{ width: '30px', height: '30px' }} alt=\"img removed\" /><br /> */}\n                        Engage\n                    </NavLink>\n                    <NavLink to=\"/my-cards\" className=\"nav-item nav-link p-2\">\n                        {/* <img src={Img} style={{ width: '30px', height: '30px' }} alt=\"img removed\" /><br /> */}\n                        My Cards\n                    </NavLink>\n                    <NavLink to=\"/received-cards\" className=\"nav-item nav-link p-2\">\n                        {/* <img src={Img} style={{ width: '30px', height: '30px' }} alt=\"img removed\" /><br /> */}\n                        Received\n                    </NavLink>\n                </div>\n            </div>\n        </nav>\n    );\n};\n\nexport default Header;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreaters from '../../store/actions';\nimport Styles from './Snackbar.module.css';\nimport { Button } from \"reactstrap\";\n\nconst Snackbar = (props) => {\n\n    useEffect(() => {\n        setTimeout(() => {\n            props.onSetSnackbarMessage(null);\n            props.checkInternet && props.emptySnackbar();\n        }, 3000);\n    }, []);\n\n    return (\n        <div className={props.error ? [Styles.snackbar, Styles.show].join(\" \") : Styles.snackbar}>\n            <Button\n                close\n                style={{ color: '#fff', marginLeft: '35px' }}\n                onClick={() => {\n                    props.onSetSnackbarMessage(null);\n                    props.checkInternet && props.emptySnackbar();\n                }}></Button>\n            {props.error}\n        </div>\n    )\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSetSnackbarMessage: (message) => dispatch(actionCreaters.setSnackbarMessage(message))\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Snackbar);","import React, { useState, useEffect } from 'react';\nimport { Col } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport * as actionCreaters from '../../store/actions';\nimport { isMobileView } from '../../helpers/miscellaneous';\nimport Header from '../Header/Header';\nimport Snackbar from '../Snackbar/Snackbar';\n\nconst MainLayout = (props) => {\n    const [isOnline, setOnlineStatus] = useState(null);\n\n    useEffect(() => {\n        getMyLocation();\n    }, []);\n\n    const updateOnlineStatus = () => {\n        setOnlineStatus(navigator.onLine);\n    };\n\n    const emptySnackbar = () => {\n        setOnlineStatus(null);\n    };\n\n    const getMyLocation = () => {\n        const location = window.navigator && window.navigator.geolocation\n\n        if (location) {\n            location.getCurrentPosition((position) => {\n                props.onUpdateUserLocation({\n                    latitude: position.coords.latitude,\n                    longitude: position.coords.longitude\n                })\n            }, (error) => {\n                // setLocation({\n                //     latitude: 'err-latitude',\n                //     longitude: 'err-longitude'\n                // })\n            })\n        }\n    };\n\n    const checkInternetConnection = () => {\n        window.addEventListener('online', () => updateOnlineStatus());\n        window.addEventListener('offline', () => updateOnlineStatus());\n        if (isOnline) {\n            return (\n                <Snackbar\n                    error='Back Online !'\n                    checkInternet=\"true\"\n                    emptySnackbar={() => emptySnackbar()}\n                />\n            );\n        }\n        if (isOnline === false) {\n            return (\n                <Snackbar\n                    error='You are Offline !'\n                    checkInternet=\"true\"\n                    emptySnackbar={() => emptySnackbar()}\n                />\n            );\n        }\n    };\n\n    // props.token && showPromptMessage();\n    return (\n        <Col className=\"main-layout offset-md-4\" xs={12} lg={4} md={4} style={{ paddingLeft: '0px', paddingRight: '0px' }}>\n            {\n                props.message &&\n                <Snackbar error={props.message} />\n            }\n            {\n                isMobileView() ?\n                    <>\n                        {props.children}<br /><br /><br />\n                        <Header />\n                    </>\n                    :\n                    <>\n                        <Header />\n                        {props.children}\n                    </>\n            }\n            {/* Check Internet Connection */}\n            {checkInternetConnection()}\n        </Col>\n    );\n};\n\nconst mapStateToProps = state => {\n    return {\n        message: state.mainLayout.message,\n        userDetails: state.home.userDetails\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUpdateUserLocation: (location) => dispatch(actionCreaters.updateUserLocation(location))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainLayout);\n","import React, { Component } from 'react';\nimport classes from './ErrorBoundary.module.css';\nimport errorImage from '../assets/img/something-went-wrong.gif';\n\nclass ErrorBoundary extends Component {\n\n    state = {\n        hasError: false\n    };\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true };\n    };\n\n    componentDidCatch(error, info) {\n        console.log('===error===', error, '===info===', info)\n        // sendErrorInfo(error, info.componentStack);\n    };\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                <div className={classes['wrong-outer']}>\n                    <div className={classes['wrong-inner']}>\n                        <img className={classes['img-went-wrong']} src={errorImage} alt='KONTIKI LABS' />\n                        <h2>Oops! Looks like something went wrong.</h2>\n                        <p>Give us a few moments to look in to it.</p>\n                    </div>\n                </div>\n            );\n        }\n        return this.props.children;\n    };\n};\n\nexport default ErrorBoundary;\n","import React from 'react';\nconst Login = React.lazy(() => import('./components/Auth/Login/Login'));\nconst Signup = React.lazy(() => import('./components/Auth/Signup/Signup'));\nconst Engage = React.lazy(() => import('./components/Engage/Engage'));\nconst MyCards = React.lazy(() => import('./components/MyCards/MyCards'));\nconst ReceivedCards = React.lazy(() => import('./components/ReceivedCards/ReceivedCards'));\nconst Home = React.lazy(() => import('./components/Home/Home'));\n\nexport const unauthenticated_routes = [\n    {\n        path: '/login',\n        component: Login\n    },\n    {\n        path: '/signup',\n        component: Signup\n    }\n];\n\nexport const authenticated_routes = [\n    {\n        path: '/',\n        component: Home\n    },\n    {\n        path: '/engage',\n        component: Engage\n    },\n    {\n        path: '/my-cards',\n        component: MyCards\n    },\n    {\n        path: '/received-cards',\n        component: ReceivedCards\n    }\n];\n\nexport const authenticated_super_admin_routes = [\n    {\n        path: '/admin',\n        component: Login\n    },\n];","// import GAListener from 'components/GAListener';\nimport React, { Component } from 'react';\nimport { Redirect, Route, Switch, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PageSpinner from './components/PageSpinner/PageSpinner';\nimport MainLayout from './components/MainLayout/MainLayout';\nimport * as actionCreaters from './store/actions';\nimport { getItem } from './helpers/cookie';\nimport ErrorBoundary from './ErrorBoundary/ErrorBoundary'\n// import Loader from './components/Loader/Loader';\n// const ErrorBoundary = React.lazy(() => import('./ErrorBoundary/ErrorBoundary'));\nimport { authenticated_routes, unauthenticated_routes } from './Routes';\nimport './styles/reduction.scss';\n\nclass App extends Component {\n\n    state = {\n        path: '',\n        routes: []\n    };\n\n    getRedirectPath = (routes) => {\n        let routeExist = false;\n        for (let i = 0; i < routes.length; i++) {\n            if (routes[i].path === this.props.location.pathname) {\n                routeExist = true;\n            }\n        }\n        const redirectDefaultRoute = getItem('token') ? '/' : '/login';\n        return routeExist ? this.props.location.pathname : redirectDefaultRoute\n    }\n\n    render() {\n\n\n        // let routes = (\n        //     <MainLayout breakpoint={this.props.breakpoint}>\n        //         <React.Suspense fallback={<Loader />} >\n        //             {\n        //                 authenticated_routes.map(({ path, component }, key) => <Route exact path={path} component={component} key={key} />)\n        //             }\n        //             <Redirect to={this.getRedirectPath(authenticated_routes)} />\n        //         </React.Suspense>\n        //     </MainLayout>\n        // );\n\n        // const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImE5ZGVlZWYwLTY0ZmItMTFlYS04NDUwLTAzZGIxMWYzODQ3NiIsIm5hbWUiOiJUZXN0IiwiZW1haWwiOiJ0ZXN0QGdtYWlsLmNvbSIsIm1vYmlsZSI6Ijc1MzY3ODkwMjAiLCJpYXQiOjE1ODQwODQyNjV9.NAWb4CVez9p1Ao1eVoF2Q4JT1pjFnmvx08hsTQRBMos'\n        // const id = 'a9deeef0-64fb-11ea-8450-03db11f38476';\n        // console.log('==token===', token, '===id===', id);\n\n        let routes = (\n            <React.Suspense fallback={<PageSpinner />} >\n                {\n                    unauthenticated_routes.map(({ path, component }, key) => <Route exact path={path} component={component} key={key} />)\n                }\n                <Redirect to={this.getRedirectPath(unauthenticated_routes)} />\n            </React.Suspense>\n        );\n\n        if (getItem('token')) {\n            routes = (\n                <>\n                    <MainLayout breakpoint={this.props.breakpoint}>\n                        <React.Suspense fallback={<PageSpinner />} >\n                            {\n                                authenticated_routes.map(({ path, component }, key) => <Route exact path={path} component={component} key={key} />)\n                            }\n                        </React.Suspense>\n                    </MainLayout>\n                    <Redirect to={this.getRedirectPath(authenticated_routes)} />\n                </>\n            );\n        }\n\n        return (\n            <ErrorBoundary>\n                <Switch>\n                    {routes}\n                </Switch>\n            </ErrorBoundary>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        authRedirectPath: state.auth.authRedirectPath,\n        superAdminDetails: state.auth.superAdminDetails\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSetRedirectPath: (path) => dispatch(actionCreaters.setRedirectPath(path))\n    };\n};\n\nexport default withRouter((connect(mapStateToProps, mapDispatchToProps)(App)));\n// withRouter(connect(mapStateToProps, mapDispatchToProps)(AuthorizationCheck(App, axios)));\n","/*\n * This is the basic function vastly used in in reducers to update or concatinate\n * their old object with new properties\n */\n\nexport const updateObject = (oldObject, updatedProperties) => {\n\treturn {\n\t\t...oldObject,\n\t\t...updatedProperties\n\t};\n};\n","/*\n * This file contains store (accessible to all components) which get manipulated based on dispatched actions for Authentication\n */\nimport * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    token: null,\n    userId: null,\n    error: null,\n    adminDetails: {},\n    authRedirectPath: '/admin',\n    otp: '',\n    requestToSetPassword: '',\n    userDetails: {},\n    isPasswordSetSuccessfully: false,\n    isLoading: false\n};\n\nconst authSuccess = (state, action) => {\n    return updateObject(state, {\n        adminDetails: action.adminDetails,\n        token: action.adminDetails.token,\n        userId: action.adminDetails.id,\n        authRedirectPath: '/'\n    });\n};\n\nconst authFail = (state, action) => {\n    return updateObject(state, {\n        error: action.error\n    });\n};\n\nconst authLogout = (state, action) => {\n    return updateObject(state, {\n        token: null,\n        userId: null,\n        error: null,\n        adminDetails: {},\n        authRedirectPath: '/onboard',\n        otp: '',\n        requestToSetPassword: '',\n        userDetails: {},\n        isPasswordSetSuccessfully: false,\n        isLoading: false\n    });\n};\n\nconst updateLoadingStatus = (state, action) => {\n    return updateObject(state, {\n        isLoading: action.status\n    });\n};\n\nconst setRedirectPath = (state, action) => {\n    return updateObject(state, {\n        authRedirectPath: action.path\n    });\n};\n\nconst setOtp = (state, action) => {\n    return updateObject(state, {\n        otp: action.otp\n    });\n};\n\nconst emptyToken = (state, action) => {\n    return updateObject(state, {\n        token: null\n    });\n};\n\nconst setRequestToSetPasswordId = (state, action) => {\n    return updateObject(state, {\n        requestToSetPassword: action.requestToSetPassword\n    });\n};\n\nconst updateSetPasswordStatus = (state, action) => {\n    return updateObject(state, {\n        isPasswordSetSuccessfully: action.status\n    });\n};\n\nconst Auth = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTH_SUCCESS:\n            return authSuccess(state, action);\n        case actionTypes.AUTH_FAIL:\n            return authFail(state, action);\n        case actionTypes.AUTH_LOGOUT:\n            return authLogout(state, action);\n        case actionTypes.UPDATE_LOADING_STATUS:\n            return updateLoadingStatus(state, action);\n        case actionTypes.SET_REDIRECT_PATH:\n            return setRedirectPath(state, action);\n        case actionTypes.SET_OTP:\n            return setOtp(state, action);\n        case actionTypes.EMPTY_TOKEN:\n            return emptyToken(state, action);\n        case actionTypes.SET_REQUEST_TO_SET_PASSWORD_ID:\n            return setRequestToSetPasswordId(state, action);\n        case actionTypes.UPDATE_SET_PASSWORD_STATUS:\n            return updateSetPasswordStatus(state, action);\n        default:\n            return state;\n    }\n};\n\nexport default Auth;\n","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    userDetails: {},\n    userSocialUrl: {}\n};\n\nconst setUserDetails = (state, action) => {\n    return updateObject(state, {\n        userDetails: action.userDetails\n    });\n};\n\nconst setUserSocialUrl = (state, action) => {\n    return updateObject(state, {\n        userSocialUrl: action.userSocialUrl\n    });\n};\n\nconst emptyUserProfile = (state, action) => {\n    return updateObject(state, {\n        userDetails: {},\n        userSocialUrl: {}\n    });\n};\n\nconst Home = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_USER_DETAILS:\n            return setUserDetails(state, action);\n        case actionTypes.SET_USER_SOCIAL_URL:\n            return setUserSocialUrl(state, action);\n        case actionTypes.EMPTY_USER_PROFILE:\n            return emptyUserProfile(state, action);\n        default:\n            return state;\n    }\n};\n\nexport default Home;","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    cards: [],\n    socialUrl: {}\n};\n\nconst setCards = (state, action) => {\n    return updateObject(state, {\n        cards: action.cards\n    });\n};\n\nconst updateCards = (state, action) => {\n    const updateCardsData = state.cards.concat(action.cardDetails);\n    return updateObject(state, {\n        cards: updateCardsData\n    });\n};\n\nconst setSocialUrl = (state, action) => {\n    return updateObject(state, {\n        socialUrl: action.socialUrl\n    });\n};\n\nconst emptyCards = (state, action) => {\n    return updateObject(state, {\n        cards: []\n    });\n};\n\nconst MyCards = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_CARDS:\n            return setCards(state, action);\n        case actionTypes.EMPTY_CARDS:\n            return emptyCards(state, action);\n        case actionTypes.UPDATE_CARDS:\n            return updateCards(state, action);\n        case actionTypes.SET_SOCIAL_URL:\n            return setSocialUrl(state, action);\n        default:\n            return state;\n    }\n};\n\nexport default MyCards;","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    message: null\n};\n\nconst setSnackbarMessage = (state, action) => {\n    return updateObject(state, {\n        message: action.message\n    });\n};\n\nconst MainLayout = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_SNACKBAR_MESSAGE:\n            return setSnackbarMessage(state, action);\n        default:\n            return state;\n    }\n};\n\nexport default MainLayout;","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    // questions: [],\n    questions: [{\n        questionText: 'hello real madrid blah blah blah blah v v blah',\n        entryFee: 6578,\n        contestId: 'J71282',\n        options: [{\n            id: '5746154123',\n            optionText: 'this is option1 this is testing long text option1',\n            betCountOnOption: '50'\n        },\n        {\n            id: '5746154123',\n            optionText: 'this is option1',\n            betCountOnOption: '50'\n        },\n        {\n            id: '5746154123',\n            optionText: 'this is option1',\n            betCountOnOption: '50'\n        },\n        {\n            id: '5746154123',\n            optionText: 'this is option1',\n            betCountOnOption: '50'\n        }]\n    },\n    {\n        questionText: 'hello real madrid222',\n        entryFee: 6578,\n        contestId: 'J71282',\n        options: [{\n            id: '5746154123',\n            optionText: 'this is option1',\n            betCountOnOption: '50'\n        },\n        {\n            id: '5746154123',\n            optionText: 'this is option1',\n            betCountOnOption: '50'\n        },\n        {\n            id: '5746154123',\n            optionText: 'this is option1',\n            betCountOnOption: '50'\n        },\n        {\n            id: '5746154123',\n            optionText: 'this is option1',\n            betCountOnOption: '50'\n        }]\n    },\n    {\n        questionText: 'hello real madrid3',\n        entryFee: 6578,\n        contestId: 'J71282',\n        options: [{\n            id: '5746154123',\n            optionText: 'this is option1',\n            betCountOnOption: '50'\n        },\n        {\n            id: '5746154123',\n            optionText: 'this is option1',\n            betCountOnOption: '50'\n        },\n        {\n            id: '5746154123',\n            optionText: 'this is option1',\n            betCountOnOption: '50'\n        },\n        {\n            id: '5746154123',\n            optionText: 'this is option1',\n            betCountOnOption: '50'\n        }]\n    }]\n};\n\nconst setQuestions = (state, action) => {\n    return updateObject(state, {\n        questions: action.questions\n    });\n};\n\nconst Contests = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_QUESTIONS:\n            return setQuestions(state, action);\n        default:\n            return state;\n    }\n};\n\nexport default Contests;","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nimport { isArrayEmpty } from '../../helpers/array';\n\nconst initialState = {\n    leaders: [],\n    isLeadersEmpty: false\n};\n\nconst setLeaders = (state, action) => {\n    return updateObject(state, {\n        leaders: action.leaders,\n        isLeadersEmpty: isArrayEmpty(action.leaders)\n    });\n};\n\nconst Leaders = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_LEADERS:\n            return setLeaders(state, action);\n        default:\n            return state;\n    }\n};\n\nexport default Leaders;","\nexport const isArrayEmpty = (arr) => {\n    return arr.length === 0;\n};\n\nexport const isArrayNotEmpty = (arr) => {\n    return arr.length > 0;\n};\n\nexport const isIncludes = (array, value) => {\n    return array.includes(value);\n};\nexport const arraySplice = (array, spliceAt) => {\n    return array.splice(spliceAt, 0);\n};\n\nexport const arraySlice = (array, spliceAt, limit) => {\n    return array.slice(spliceAt, limit);\n};\n\nexport const arrayPush = (array, data) => {\n    return array.push(data);\n};\n\nexport const arrayConcat = (array, data) => {\n    return array.concat(data);\n};\n\nexport const arrayPop = (array) => {\n    return array.pop();\n};\n","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    walletDetails: {},\n    transactions: []\n};\n\nconst setWalletDetails = (state, action) => {\n    return updateObject(state, {\n        walletDetails: action.details.wallet\n    });\n};\n\nconst setTransactions = (state, action) => {\n    return updateObject(state, {\n        transactions: action.transactions\n    });\n};\n\nconst Wallet = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_WALLET_DETAILS:\n            return setWalletDetails(state, action);\n        case actionTypes.SET_TRANSACTIONS:\n            return setTransactions(state, action);\n        default:\n            return state;\n    }\n};\n\nexport default Wallet;","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    unsettledContests: [],\n    settledContests: []\n};\n\nconst setUnsettledContests = (state, action) => {\n    return updateObject(state, {\n        unsettledContests: action.unsettledContests\n    });\n};\n\nconst setSettledContests = (state, action) => {\n    return updateObject(state, {\n        settledContests: action.settledContests\n    });\n};\n\nconst Account = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_UNSETTLED_CONTESTS:\n            return setUnsettledContests(state, action);\n        case actionTypes.SET_SETTLED_CONTESTS:\n            return setSettledContests(state, action);\n        default:\n            return state;\n    }\n};\n\nexport default Account;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport Auth from './store/reducers/Auth';\nimport Home from './store/reducers/Home';\nimport MyCards from './store/reducers/MyCards';\nimport MainLayout from './store/reducers/MainLayout';\nimport Contests from './store/reducers/Contests';\nimport Leaders from './store/reducers/Leaders';\nimport Wallet from './store/reducers/Wallet';\nimport Account from './store/reducers/Account';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nconst getBasename = () => {\n    return `/${process.env.PUBLIC_URL.split('/').pop()}`;\n};\n\n/*\n * combining all the reducers\n */\nconst rootReducer = combineReducers({\n    auth: Auth,\n    mainLayout: MainLayout,\n    home: Home,\n    myCards: MyCards,\n    contests: Contests,\n    leaders: Leaders,\n    wallet: Wallet,\n    account: Account\n});\n\n/*\n * composeEnhancers is for chrome dev toolbar which helps us see store management of redux\n */\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n/*\n * Creating Store and applying middleware \n */\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\n/*\n * Wrapping the main app with BrowserRouter (provides routing and helps us navigate through project)\n * Provider is a part of Redux which is needed in order to get access to store throughout our project \n */\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter basename={getBasename()}>\n            <App />\n        </BrowserRouter>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\nserviceWorker.register();\n","// importing axios for network request\nimport axios from 'axios';\nimport { axiosBaseUrl } from '../config';\nimport { getItem } from '../helpers/cookie';\n// Get Authentication token\nconst getAuthToken = () => {\n    const token = getItem('token');\n    return token;\n}\n\n// Created Axios instance to use it in whole application\nvar instance = axios.create({\n    baseURL: axiosBaseUrl,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n// declaring interceptors\ninstance.interceptors.request.use(response => {\n    const token = getAuthToken();\n    // Check if User is authenticated or not\n    if (token) {\n        response.headers = {\n            'x-access-token': `${token}`\n        }\n    }\n    return response;\n}, error => {\n    return error;\n});\n\nexport default instance;\n\n\n","import * as actionTypes from './actionTypes';\nimport axios from '../../httpInstance/axios';\nimport { setItem, clearItems } from '../../helpers/cookie';\nimport { loginUrl, signupUrl, socialLoginUrl, verifyEmailUrl, setPasswordUrl } from '../../url/Auth';\n\n\nexport const setSnackbarMessage = (message) => {\n    return {\n        type: actionTypes.SET_SNACKBAR_MESSAGE,\n        message\n    };\n};\n\nexport const authSuccess = (response) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        adminDetails: response,\n    };\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    // Clear cookies on logout\n    clearItems();\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n};\n\nexport const updateLoadingStatus = (status) => {\n    return {\n        type: actionTypes.UPDATE_LOADING_STATUS,\n        status\n    };\n};\n\nexport const login = (loginDetails) => {\n    return dispatch => {\n        dispatch(updateLoadingStatus(true));\n        axios.post(loginUrl(), loginDetails)\n            .then(response => {\n                dispatch(updateLoadingStatus(false));\n                if (response.data.status) {\n                    const auth = {\n                        token: response.data.entity.token,\n                        id: response.data.entity.id,\n                        role: response.data.entity.roles\n                    }\n                    setItem('auth', auth);\n                    dispatch(authSuccess(response.data.entity));\n                } else {\n                    dispatch(authFail('Invalid username or password !'));\n                }\n            })\n            .catch(error => {\n                dispatch(updateLoadingStatus(false));\n                if (error.response && error.response.status === 401) {\n                    dispatch(authFail(error.response.data.message));\n                } else {\n                    dispatch(authFail('Something Went Wrong !!'));\n                }\n            });\n    };\n};\n\nexport const signup = (signupDetails) => {\n    return dispatch => {\n        dispatch(updateLoadingStatus(true));\n        axios.post(signupUrl(), signupDetails)\n            .then(response => {\n                dispatch(updateLoadingStatus(false));\n                if (response.data.status) {\n                    dispatch(setSnackbarMessage('User created successfully !'));\n                    dispatch(login(signupDetails));\n                } else {\n                    dispatch(authFail('Invalid username or password !'));\n                }\n            })\n            .catch(error => {\n                dispatch(updateLoadingStatus(false));\n                if (error.response && error.response.status === 401) {\n                    dispatch(authFail(error.response.data.message));\n                } else {\n                    dispatch(authFail('Something Went Wrong !!'));\n                }\n            });\n    };\n};\n\nexport const setRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_REDIRECT_PATH,\n        path: path\n    };\n};\n\nexport const emptyToken = () => {\n    return {\n        type: actionTypes.EMPTY_TOKEN\n    };\n};\n\nexport const socialLogin = (authDetails) => {\n    return dispatch => {\n        dispatch(updateLoadingStatus(true));\n        axios.post(socialLoginUrl(), authDetails)\n            .then(response => {\n                dispatch(updateLoadingStatus(false));\n                if (response.data.status) {\n                    const auth = {\n                        token: response.data.entity.token,\n                        id: response.data.entity.id,\n                        role: response.data.entity.roles\n                    }\n                    setItem('auth', auth);\n                    dispatch(authSuccess(response.data.entity));\n                    // dispatch(checkUserProfileUpdated(response.data.entity.isUserProfileUpdated));\n                } else {\n                    dispatch(authFail('Invalid username or password !'));\n                }\n            })\n            .catch(error => {\n                dispatch(updateLoadingStatus(false));\n                if (error.response && error.response.status === 401) {\n                    dispatch(authFail(error.response.data.message));\n                } else {\n                    dispatch(authFail('Something Went Wrong !!'));\n                }\n            });\n    };\n};\n\nexport const setRequestToSetPasswordId = (requestToSetPassword) => {\n    return {\n        type: actionTypes.SET_REQUEST_TO_SET_PASSWORD_ID,\n        requestToSetPassword\n    };\n};\n\nexport const verifyEmail = (email) => {\n    return dispatch => {\n        dispatch(updateLoadingStatus(true));\n        axios.post(verifyEmailUrl(), { email: email })\n            .then(response => {\n                dispatch(updateLoadingStatus(false));\n                if (response.data.status) {\n                    dispatch(setSnackbarMessage(response.data.message));\n                    dispatch(setRequestToSetPasswordId(response.data.entity.requestToSetPassword.id));\n                } else {\n                    dispatch(setSnackbarMessage(response.data.message));\n                }\n            })\n            .catch(error => {\n                dispatch(updateLoadingStatus(false));\n                if (error.response && error.response.status === 401) {\n                    dispatch(authFail(error.response.data.message));\n                } else {\n                    dispatch(authFail('Something Went Wrong !!'));\n                }\n            });\n    };\n};\n\n\nexport const updateSetPasswordStatus = (status) => {\n    return {\n        type: actionTypes.UPDATE_SET_PASSWORD_STATUS,\n        status\n    };\n};\n\nexport const setPassword = (passwordData) => {\n    return dispatch => {\n        // dispatch(updateLoadingStatus(true));\n        axios.post(setPasswordUrl(), passwordData)\n            .then(response => {\n                // dispatch(updateLoadingStatus(false));\n                if (response.data.status) {\n                    dispatch(setSnackbarMessage('Password set successfully !'));\n                    dispatch(updateSetPasswordStatus(true));\n                }\n                else {\n                    dispatch(updateSetPasswordStatus(false));\n                    dispatch(setSnackbarMessage(response.data.message));\n                }\n            })\n            .catch(error => {\n                // dispatch(updateLoadingStatus(false));\n                if (error.response && error.response.status === 401) {\n                    dispatch(authFail(error.response.data.message));\n                } else {\n                    dispatch(authFail('Something Went Wrong !!'));\n                }\n            });\n    };\n};\n","\nexport const loginUrl = () => {\n    return `login`;\n};\n\nexport const signupUrl = () => {\n    return `users`;\n};\n\nexport const socialLoginUrl = () => {\n    return `social-login`;\n};\n\nexport const verifyEmailUrl = () => {\n    return `requesttosetpassword`;\n};\n\nexport const setPasswordUrl = () => {\n    return `forgotpassword`;\n};\n","import * as actionTypes from './actionTypes';\nimport axios from '../../httpInstance/axios';\n// import { getItem } from '../../helpers/cookie';\n\nexport const setLeaders = (leaders) => {\n    return {\n        type: actionTypes.SET_LEADERS,\n        leaders\n    };\n};\n\nexport const getLeaders = () => {\n    return dispatch => {\n        axios.get(`leadership`)\n            .then(response => {\n                if (response.data.entity) {\n                    dispatch(setLeaders(response.data.entity));\n                }\n            })\n            .catch(error => {\n\n            });\n    };\n};","import * as actionTypes from './actionTypes';\nimport axios from '../../httpInstance/axios';\nimport { updateUserLocationUrl } from '../../url/MainLayout';\n\nexport const setSnackbarMessage = (message) => {\n    return {\n        type: actionTypes.SET_SNACKBAR_MESSAGE,\n        message\n    };\n};\n\nexport const updateUserLocation = (location) => {\n    return dispatch => {\n        axios.put(updateUserLocationUrl(), location)\n            .then(response => {\n\n            })\n            .catch(error => {\n\n            });\n    };\n};\n\n","\nimport { getItem } from '../helpers/cookie';\n\nexport const updateUserLocationUrl = () => {\n    return `users/${getItem('id')}/location`;\n};\n","\nimport { getItem } from '../helpers/cookie';\n\nexport const cardsUrl = () => {\n    return `users/${getItem('id')}/cards`;\n};\n\nexport const cardDetailsUrl = (cardId) => {\n    return `cards/${cardId}/details`;\n};\n\nexport const socialUrl = () => {\n    return `users/${getItem('id')}/social`;\n};\n","import * as actionTypes from './actionTypes';\nimport axios from '../../httpInstance/axios';\nimport { cardsUrl, cardDetailsUrl, socialUrl } from '../../url/MyCards';\n\nexport const setSnackbarMessage = (message) => {\n    return {\n        type: actionTypes.SET_SNACKBAR_MESSAGE,\n        message\n    };\n};\n\nexport const updateLoadingStatus = (status) => {\n    return {\n        type: actionTypes.UPDATE_LOADING_STATUS,\n        status\n    };\n};\n\nexport const setCards = (cards) => {\n    return {\n        type: actionTypes.SET_CARDS,\n        cards\n    };\n};\n\nexport const setUserDetails = (userDetails) => {\n    return {\n        type: actionTypes.SET_USER_DETAILS,\n        userDetails\n    };\n};\n\nexport const getCards = () => {\n    return dispatch => {\n        axios.get(cardsUrl())\n            .then(response => {\n                if (response.data.entity) {\n                    dispatch(setCards(response.data.entity.cards || []));\n                    dispatch(setUserDetails(response.data.entity.user));\n                } else {\n                    dispatch(setSnackbarMessage(response.data.message));\n                }\n            })\n            .catch(error => {\n                dispatch(setSnackbarMessage('Something Went Wrong !!'));\n            });\n    };\n};\n\nexport const setSocialUrl = (socialUrl) => {\n    return {\n        type: actionTypes.SET_SOCIAL_URL,\n        socialUrl\n    };\n};\n\nexport const getSocialUrl = () => {\n    return dispatch => {\n        axios.get(socialUrl())\n            .then(response => {\n                if (response.data.entity) {\n                    dispatch(setSocialUrl(response.data.entity));\n                }\n            })\n            .catch(error => {\n\n            });\n    };\n};\n\nexport const updateCards = (cardDetails) => {\n    return {\n        type: actionTypes.UPDATE_CARDS,\n        cardDetails\n    };\n};\n\nexport const addCard = (cardDetails) => {\n    return dispatch => {\n        axios.post(cardsUrl(), cardDetails)\n            .then(response => {\n                if (response.data.entity) {\n                    dispatch(updateCards(response.data.entity));\n                    dispatch(setSnackbarMessage(response.data.message));\n                } else {\n                    dispatch(setSnackbarMessage(response.data.message));\n                }\n            })\n            .catch(error => {\n                // dispatch(authFail('Something Went Wrong !!'));\n            });\n    };\n};\n\nexport const updateCardDetails = (cardId, cardDetails) => {\n    return dispatch => {\n        axios.put(cardDetailsUrl(cardId), cardDetails)\n            .then(response => {\n                if (response.data.entity) {\n                    // dispatch(updateCards(response.data.entity));\n                    dispatch(setSnackbarMessage(response.data.message));\n                } else {\n                    dispatch(setSnackbarMessage(response.data.message));\n                }\n            })\n            .catch(error => {\n                // dispatch(authFail('Something Went Wrong !!'));\n            });\n    };\n};\n\nexport const emptyCards = () => {\n    return {\n        type: actionTypes.EMPTY_CARDS\n    };\n};\n","\n\nimport { getItem } from '../helpers/cookie';\n\nexport const userProfileUrl = () => {\n    return `users/${getItem('id')}/profile`;\n};\n","import * as actionTypes from './actionTypes';\nimport axios from '../../httpInstance/axios';\nimport { userProfileUrl } from '../../url/Home';\nimport { socialUrl } from '../../url/MyCards';\n\nexport const setSnackbarMessage = (message) => {\n    return {\n        type: actionTypes.SET_SNACKBAR_MESSAGE,\n        message\n    };\n};\n\nexport const setUserDetails = (userDetails) => {\n    return {\n        type: actionTypes.SET_USER_DETAILS,\n        userDetails\n    };\n};\n\nexport const setUserSocialUrl = (userSocialUrl) => {\n    return {\n        type: actionTypes.SET_USER_SOCIAL_URL,\n        userSocialUrl\n    };\n};\n\nexport const getUserProfile = () => {\n    return dispatch => {\n        axios.get(userProfileUrl())\n            .then(response => {\n                if (response.data.entity) {\n                    dispatch(setUserSocialUrl(response.data.entity.social));\n                    dispatch(setUserDetails(response.data.entity.user));\n                }\n            })\n            .catch(error => {\n\n            });\n    };\n};\n\nexport const updateUserProfile = (profileDetails) => {\n    return dispatch => {\n        axios.put(userProfileUrl(), profileDetails)\n            .then(response => {\n                if (response.data.entity) {\n                    dispatch(setUserDetails(response.data.entity));\n                    dispatch(setSnackbarMessage(response.data.message));\n                } else {\n                    dispatch(setSnackbarMessage(response.data.message));\n                }\n            })\n            .catch(error => {\n\n            });\n    };\n};\n\nexport const updateSocialUrl = (socialPlatform) => {\n    return dispatch => {\n        axios.put(socialUrl(), socialPlatform)\n            .then(response => {\n                if (response.data.entity) {\n                    dispatch(setUserSocialUrl(response.data.entity));\n                    dispatch(setSnackbarMessage(response.data.message));\n                }\n            })\n            .catch(error => {\n\n            });\n    };\n};\n\nexport const emptyUserProfile = () => {\n    return {\n        type: actionTypes.EMPTY_USER_PROFILE\n    };\n};\n","\nexport const isMobileView = () => {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n}\n\nexport const parseData = (data) => {\n    return JSON.parse(JSON.stringify(data));\n};\n\nexport const getCapitalizeText = (text) => {\n    return text.replace(/\\b\\w/g, l => l.toUpperCase());\n}\n\nexport const isEmpty = (item) => {\n    return item.trim() === '';\n};\n\nexport const isEqual = (item1, item2) => {\n    if (typeof (item1) === 'number' && typeof (item2) === 'number') {\n        return item1 === item2;\n    }\n    if (typeof (item1) === 'string' && typeof (item2) === 'string') {\n        return item1.toLowerCase() === item2.toLowerCase();\n    }\n};\n\nexport const containsOnlyNumber = (item) => {\n    let regex = /^[0-9]*$/;\n    return regex.test(item);\n};\n\nexport const isGreaterThan = (item1, item2) => {\n    return item1 > item2;\n};\n\nexport const isGreaterThanOrEqualTo = (item1, item2) => {\n    return item1 >= item2;\n};\n\nexport const isLessThan = (item1, item2) => {\n    return item1 < item2;\n};\n\nexport const isLessThanOrEqualTo = (item1, item2) => {\n    return item1 <= item2;\n};\n\nexport const create_UUID = (name) => {\n    var dt = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (dt + Math.random() * 16) % 16 | 0;\n        dt = Math.floor(dt / 16);\n        return (c === 'x' ? r : ((r & 0x3) | 0x8)).toString(16);\n    });\n    return uuid.concat(name);\n};\n\nexport const getDateTime = (timeStamp) => {\n    const date = new Date(timeStamp);\n    const dateTime = (\n        date.getUTCFullYear() +\n        '-' + ('0' + date.getUTCMonth()).slice(-2) +\n        '-' + ('0' + date.getUTCDate()).slice(-2) +\n        ' ' + ('0' + date.getUTCHours()).slice(-2) +\n        ':' + ('0' + date.getUTCMinutes()).slice(-2) +\n        ':' + ('0' + date.getUTCSeconds()).slice(-2)\n    );\n    return dateTime;\n};\n\nexport const getDate = (timeStamp) => {\n    const date = new Date(timeStamp);\n    const updatedDate = (\n        date.getUTCFullYear() +\n        '-' + ('0' + date.getUTCMonth()).slice(-2) +\n        '-' + ('0' + date.getUTCDate()).slice(-2)\n    );\n    return updatedDate;\n};\n\nexport const convertDateFormat = (date, customDateFormat) => {\n    date = new Date(date);\n    let month = date.getMonth() + 1;\n    let day = date.getDate();\n    month = month < 10 ? `0${month}` : month;\n    day = day < 10 ? `0${day}` : day;\n    if (customDateFormat) {\n        return `${day}/${month}/${date.getFullYear()}`\n    }\n    return `${date.getFullYear()}-${month}-${day}`;\n};\n\nexport const convertToTimestamp = (date) => {\n    return new Date(date).getTime();\n};\n\nexport const isAndroid = () => {\n    // var ua = navigator.userAgent;\n    return !navigator.userAgent.match(/Android/i);\n    // if (!(ua.match(/Android/i))) {\n    //     //this code will run only when there is any non-android client.\n    // }\n};\n","import Cookies from 'universal-cookie';\nimport { isAndroid } from '../helpers/miscellaneous';\n\nconst cookies = new Cookies();\n\nexport const getItem = (key) => {\n    let meta = null;\n    if (isAndroid()) {\n        const auth = JSON.parse(localStorage.getItem('auth'));\n        if (auth && auth.hasOwnProperty(key)) {\n            meta = auth[key];\n        } else {\n            meta = JSON.parse(localStorage.getItem(key));\n        }\n    } else {\n        const auth = cookies.get('auth');\n        if (auth && auth.hasOwnProperty(key)) {\n            meta = auth[key];\n        } else {\n            meta = cookies.get(key);\n        }\n    }\n    return meta;\n};\n\nexport const setItem = (key, value) => {\n    isAndroid() ? localStorage.setItem(key, JSON.stringify(value)) : cookies.set(key, value, { path: '/' });\n};\n\nexport const removeItem = (key) => {\n    cookies.remove(key, { path: '/' });\n};\n\nexport const clearItems = () => {\n    if (isAndroid()) {\n        localStorage.clear();\n    } else {\n        const allCookies = cookies.getAll();\n        for (let key in allCookies) {\n            cookies.remove(key, { path: '/' });\n        }\n    }\n};\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"snackbar\":\"Snackbar_snackbar__cWZDo\",\"show\":\"Snackbar_show__2-uF8\",\"fadeout\":\"Snackbar_fadeout__2zRAU\",\"fadein\":\"Snackbar_fadein__gK3he\",\"close_icon\":\"Snackbar_close_icon__3hL4j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrong-outer\":\"ErrorBoundary_wrong-outer__246kP\",\"wrong-inner\":\"ErrorBoundary_wrong-inner__3-mlZ\",\"img-went-wrong\":\"ErrorBoundary_img-went-wrong__2KZd7\"};"],"sourceRoot":""}